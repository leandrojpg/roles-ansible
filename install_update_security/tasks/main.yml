---
- name: Nao atualiza o pacote do docker e contained
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - mysql-server
    - postgresql
    - kong
    - konga
    - elasticsearch 
    - logstash
    - nginx
    - mongodb-org
    - php
    - dotnet
    - mono
    - dotnet-sdk-5.0
    - dotnet-sdk-3.1
    - dotnet-sdk2.2
    - apache2
    - msodbcsql
    - mariadb-server
    - mariadb-common
    - php7-fpm
    - python
    - mysql
    - mysql7
    - linux-firmware
    - redis-server
    - rabbitmq-server
    - erlang-base
    - kibana
    - wazuh-agent
    - mysql-client
    - mariadb-server 
    - php7.2-fpm
    - php-fpm
    - php7.4
    - php7.2
    - php7.1
    - php 
    - mysql-server-5.7
    - docker
   
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


#- name: Upgrade all packages, excluding kernel & foo related packages
#  yum:
#    name: '*'
#    state: latest
#    update_cache: yes
#    exclude: dotnet-sdk-*,nginx,php*,mysql*,postgresql*,docker-ce*,dotnet*,mono*,xamarin,mongo*,mongodb-org*,asterisk*,http*,mariadb*,kibana,elasticsearch*
#    ignore_errors: True
#    async: 60
#    poll: 60
#  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts ['distribution_major_version'] == '7'


- name: Security updates only
#  command: yum -y --security update
  command: yum update --exclude=dotnet-sdk-*,nginx,php*,mysql*,postgresql*,docker-ce*,dotnet*,mono*,xamarin,mongo*,mongodb-org*,asterisk*,http*,mariadb*,kibana,elasticsearch*,msodbcsql17*,mssql-tools*,java*,oniguruma5php,graylog*,docker*,initscripts* -y
  ignore_errors: True
  async: 60
  poll: 60
  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts ['distribution_major_version'] == '7'
# command: yum update --exclude=dotnet-sdk-*,nginx,php*,mysql*,postgresql*,docker-ce*,dotnet*,mono*,xamarin,mongo*,mongodb-org*,asterisk*,http*,mariadb*



#- name: Atualiza somente pacotes de segurança
#  yum:
#    security: yes
#    state: latest
#    exclude: docker*,containerd*
#  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts ['distribution_major_version'] == '7' 


- name: Faz a atualização do cache
  apt: update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


#- name: Instala o pacote para gerar atualizacao automatica de seguranca somente
#  apt: name=unattended-upgrades state=present
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


#- name: Adiciona tarefa de atualizacao de seguranca aos sabados as 01 da manha
#  ansible.builtin.cron:
#    name: "Executa update de seguranca 01 da manha"
#    minute: "01"
#    hour: "01"
#    day: "*"
#    month: "*"
#    weekday: "6"
#    job: "sudo /usr/bin/unattended-upgrade -v"
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'



- name: Update all packages to their latest version
  apt:
    name: "*"
    state: latest
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'


#- name: Executa o primeiro Update
#  shell:  /usr/bin/unattended-upgrade
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#


#- name: Remove Chrony se tiver instalado no Ubuntu
#  apt:
#    name: ntp
#    state: absent
#  when: ansible_distribution == 'Ubuntu'



#- name: Remove Chrony se tiver instalado Centos
#  yum:
#    name: ntp
#    state: absent
#  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts ['distribution_major_version'] == '7'


#- name: Instala os pacotes de NTP em servidores Ubuntu
#  apt:
#    name: "{{ packages }}"
#    state: present
#    update_cache: yes
#  vars:
#    packages:
#   - chrony
#  when: ansible_distribution == 'Ubuntu'


#- name: Instala os pacotes de NTP  Centos
#  yum:
#    name: "{{ packages }}"
#    state: present
#    update_cache: yes
#  vars:
#    packages:
#    - chrony
#  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts ['distribution_major_version'] == '7'
#
#
#- name: Ativa o ntp no boot se Ubuntu
#  ansible.builtin.systemd:
#    name: chrony
#    state: started
#    enabled: yes
#  when: ansible_distribution == 'Ubuntu'

#- name: Ativa o ntp no boot se Centos
#  ansible.builtin.systemd:
#    name: chronyd
#    state: started
#    enabled: yes
#  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts ['distribution_major_version'] == '7'


#- name: Ajusta a configuracao do NTP para Ubuntu
#  template: src=chrony.conf.j2 dest=/etc/chrony/chrony.conf
#  when: ansible_distribution == 'Ubuntu'


#- name: Ajusta a configuracao do NTP para Centos
#  template: src=chrony.conf.j2 dest=/etc/chrony.conf
#  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts ['distribution_major_version'] == '7'
#
#- name: Ajusta o timezone America/Sao_Paulo
#  timezone:
#    name: America/Sao_Paulo
#
#
#- name: Forca a parada do ntp para sincronia incial
#  systemd: name=chrony state=stopped
#  when: ansible_distribution == 'Ubuntu'
#
#
#
#- name: Forca a parada do ntp para sincronia incial
#  systemd: name=chronyd state=stopped
#  when: ansible_facts['os_family'] == "RedHat"



#- name: Force ntp
#  shell: chronyd -q "{{ ntpdate_server }}"
#  tags:
#    - ntp


#- name: Reinicia o ntp se for Ubuntu
#  ansible.builtin.systemd:
#    state: restarted
#    name: chrony
#  when: ansible_distribution == 'Ubuntu'
#
#
#- name: Reinicia o ntp se for Centos
#  ansible.builtin.systemd:
#    state: restarted
#    name: chronyd
#  when: ansible_facts['os_family'] == "RedHat"




